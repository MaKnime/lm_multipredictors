#Forecast Y=CPAs USING x=MULTIPLE PREDICTORS AND LINEAR REGRESSION
library(corrplot)
library(plotly)
library(prophet)
library(tidyverse)
library(bsts)  

# import data set
#https://docs.google.com/spreadsheets/d/19xxZOgGnswmLN2FHMUjcuHizwf7IT6KTcovP0Mx2Tfk/edit?usp=sharing

attach(DF)

#Visualize correlation between variables.
newdatacor = cor(DF[2:9])
corrplot(newdatacor, method = "number")

#Perform aditive multiple Xs linear regression
v_predictor <- c("Reach","Impressions", "`Amount spent`", "Clicks", "CPA", "Frequency", "Promo", "`Black Friday`")

v_response <- "Buyers"

f <- paste(v_predictor, collapse = "+")
f <- paste(f, "-1")
f <- paste(v_response, f, sep = "~")
f <- as.formula(f)

fit <- lm(f, data = DF)
summary(fit)

#Plot relation y_dependent & x_independent
plot(CPA, Buyers)
abline(lm(Buyers ~ CPA))


#Predict fitted values into dataframe
Y1 <- fit$fitted.values
Y_value <- as.data.frame(Y1)
write.csv(Y_value, file = "y_value_v1.csv")


#Export coefficients into data frame
write.csv(data.frame(summary(fit)$coefficients), file="coeff2.csv")


#manually check the Betas cool to compare if fitted values match
coeffs <- coefficients(fit)
coeffs
DF$Reach * coeffs[1] + DF$Impressions *coeffs[2] + DF$`Amount spent`*coeffs[3] + DF$Clicks*coeffs[4] + DF$CPA*coeffs[5] + 
DF$Frequency*coeffs[6] + DF$Promo*coeffs[7] + DF$`Black Friday`*coeffs[8]


#Plot Real vs Baseline
Date <- DF$Day
Buyers_Real <- DF$Buyers
Buyers_forecast <- fit$fitted.values

data <- data.frame(Date,  Buyers_Real, Buyers_forecast)
data$Date <- factor(data$Date, levels = data[["Date"]])

p <- plot_ly(data, x = ~Date, y = ~Buyers_Real, name = 'Real', type = 'scatter', mode = 'lines',
             line = list(color = 'rgb(105, 12, 24)', width = 3)) %>%
  add_trace(y = ~Buyers_forecast, name = 'Forecast', line = list(color = 'rgb(22, 96, 167)', width = 3)) %>%
  layout(title = "Real Buyers vs Predicted Buyers",
         xaxis = list(title = "Date"),
         yaxis = list (title = "Buyers Lm model"))

print(p)

#Mape of the lineal model
new <- subset(data, Date >='2018-03-01')
mean(abs((new$Buyers_Real - new$Buyers_forecast)/new$Buyers_Real))


#Call function with prohet to fit the model based on the historical data
colnames(DF) <- c("ds", "reach", "frequency" , "Spend" , "CPA" , "y", "clicks", "Impressions" ,"LTV", "Promo", "BF")
m <- prophet(DF)

#Forecast future by default the model will also include historical dates
future <- make_future_dataframe(m, periods = 60)
tail(future)

#Predict the future outcome into a new data frame
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])

#Mape of Prophet
Date <- DF$ds
Buyers_Real <- DF$y
Buyers_Prophet <- subset(forecast, ds <'2018-07-01')
Buyers_Prophet_m <- Buyers_Prophet$yhat 

p_data <- data.frame(Date,  Buyers_Real , Buyers_Prophet_m)
p_new <- subset(p_data, Date >='2018-03-01')
mean(abs((p_new$Buyers_Real - p_new$Buyers_Prophet_m)/p_new$Buyers_Real))

#Plot Real vs Baseline Prophet
p_data <- data.frame(Date,  Buyers_Real, Buyers_Prohet_m)
data$Date <- factor(data$Date, levels = data[["Date"]])

p <- plot_ly(data, x = ~Date, y = ~Buyers_Real, name = 'Real', type = 'scatter', mode = 'lines',
             line = list(color = 'rgb(0,250,154)', width = 3)) %>%
  add_trace(y = ~Buyers_Prohet_m, name = 'Forecast', line = list(color = 'rgb(22, 96, 167)', width = 3)) %>%
  layout(title = "Real Buyers vs Predicted Buyers",
         xaxis = list(title = "Date"),
         yaxis = list (title = "Prophet model"))

print(p)


# plot prediction_forecast, seasonality, trend and cycle with prohet
plot(m, forecast)
prophet_plot_components(m, forecast)

#Renamos columns for BSTS
colnames(DF) <- c("Day", "reach", "frequency" , "Spend" , "CPA" , "Buyers", "clicks", "Impressions" ,"LTV", "Promo", "BF")

#Create a new variable for BSTS Model 
ss <- AddSemilocalLinearTrend(list(), DF$Buyers)
ss <- AddSeasonal(ss, DF$Buyers, nseasons = 52, season.duration = 7)

#Bsts Model 1 only takes into consideration seasonality and trend without regressors
model1 <- bsts(DF$Buyers,
               state.specification = ss,
               niter = 1000)

plot(model1)
plot(model1, "components")

#Predict Y=outcomes of buyers using model 1 using BSTS 
pred1 <- predict(model1, horizon = 120)
plot(pred1, plot.original = 447)

#Model 2 only takes into consideration seasonality and trend with regressors
model2 <- bsts(Buyers ~ Reach + Frequency + CPA + `Amount spent` + Clicks + Impressions,
               state.specification = ss,
               niter = 1000,
               data = DF)

plot(model2)
plot(model2, "comp")
plot(model2, "predictors")


#Predict outcomes of buyers using model 2 Using BSTS
pred2 <- predict(model2, newdata = DF, horizon = 120)
plot(pred2, plot.original = 447)

#Model 3 only takes into consideration seasonality and trend with regressors and 5 in spike and slab
model3 <- bsts(Buyers ~ Reach + Frequency + CPA + `Amount spent` + Clicks + Impressions + Promo + `Black Friday`,
               state.specification = ss,
               niter = 1000,
               data = DF,
               expected.model.size = 5)#Passed to SpikeSlabPrior to include more coeffs)

plot(model3)
plot(model3, "comp")
plot(model3, "predictors")

#Predict outcomes of buyers using model 3
pred3 <- predict(model3, newdata = DF, horizon = 120)
plot(pred3, plot.original = 447)

#view probability of inclusion of series in the model
plot(model2, "coef")
plot(model3, "coef")


#compare errors between the 3 models.
CompareBstsModels(list("Model 1" = model1,
                       "Model 2" = model2,
                       "Model 3" = model3),
                  colors = c("black", "red", "blue"))
#view coeffs
summary(model3)

#Extract predictions to csv
m_bsts_fitted <- pred3$mean
bsts_fitted <- as.data.frame(m_bsts_fitted)
write.csv(bsts_fitted, file = "prediction_buyers_bsts.csv")


#Plot Real vs Baseline Of Bsts model
past_prediction <- predict(model1, newdata = DF)
Date <- DF$Day
Bsts_Buyers_Real <- DF$Buyers
Bsts_Buyers_forecast <- past_prediction$mean

data1 <- data.frame(Date,  Bsts_Buyers_Real, Bsts_Buyers_forecast)
data1$Date <- factor(data$Date, levels = data[["Date"]])

p <- plot_ly(data, x = ~Date, y = ~Bsts_Buyers_Real, name = 'Real', type = 'scatter', mode = 'lines',
             line = list(color = 'rgb(207,181,59)', width = 3)) %>%
  add_trace(y = ~Bsts_Buyers_forecast, name = 'Forecast', line = list(color = 'rgb(22, 96, 167)', width = 3)) %>%
  layout(title = "Bsts Model Real Buyers vs Predicted Buyers",
         xaxis = list(title = "Date"),
         yaxis = list (title = "Buyers Lm model"))

print(p)

