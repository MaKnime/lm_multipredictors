#Forecast Y=CPAs USING x=MULTIPLE PREDICTORS AND LINEAR REGRESSION
library(corrplot)
library(plotly)
library(prophet)
library(tidyverse)
library(bsts)  

# import data set
#https://docs.google.com/spreadsheets/d/19xxZOgGnswmLN2FHMUjcuHizwf7IT6KTcovP0Mx2Tfk/edit?usp=sharing

attach(DF)

#Visualize correlation between variables.
newdatacor = cor(DF[2:9])
corrplot(newdatacor, method = "number")

#Perform aditive multiple Xs linear regression
v_predictor <- c("Reach","Impressions", "`Amount spent`", "Clicks", "CPA", "Frequency")

v_response <- "Buyers"

f <- paste(v_predictor, collapse = "+")
f <- paste(f, "-1")
f <- paste(v_response, f, sep = "~")
f <- as.formula(f)

fit <- lm(f, data = DF)
summary(fit)

#Plot relation y_dependent & x_independent
plot(CPA, Buyers)
abline(lm(Buyers ~ CPA))


#Predict fitted values into dataframe
Y1 <- fit$fitted.values
Y_value <- as.data.frame(Y1)
write.csv(Y_value, file = "y_value_v1.csv")


#Export coefficients into data frame
write.csv(data.frame(summary(fit)$coefficients), file="coeff2.csv")


#manually check the Betas cool to compare if fitted values match
coeffs <- coefficients(fit)
coeffs
DF$Reach * coeffs[1] + DF$Impressions *coeffs[2] + DF$`Amount spent`*coeffs[3] + DF$Clicks*coeffs[4] + DF$CPA*coeffs[5] + DF$Frequency*coeffs[6]


#Plot Real vs Baseline
Date <- DF$Day
Buyers_Real <- DF$Buyers
Buyers_forecast <- fit$fitted.values

data <- data.frame(Date,  Buyers_Real, Buyers_forecast)
data$Date <- factor(data$Date, levels = data[["Date"]])

p <- plot_ly(data, x = ~Date, y = ~Buyers_Real, name = 'Real', type = 'scatter', mode = 'lines',
             line = list(color = 'rgb(105, 12, 24)', width = 3)) %>%
  add_trace(y = ~Buyers_forecast, name = 'Forecast', line = list(color = 'rgb(22, 96, 167)', width = 3)) %>%
  layout(title = "Real Buyers vs Predicted Buyers",
         xaxis = list(title = "Date"),
         yaxis = list (title = "Buyers Lm model"))

print(p)

#Call function with prohet to fit the model based on the historical data
colnames(DF) <- c("ds", "reach", "frequency" , "Spend" , "CPA" , "y", "clicks", "Impressions" ,"LTV")
m <- prophet(DF)

#Forecast future by default the model will also include historical dates
future <- make_future_dataframe(m, periods = 60)
tail(future)

#Predict the future outcome into a new data frame
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])

# plot prediction_forecast, seasonality, trend and cycle with prohet
plot(m, forecast)
prophet_plot_components(m, forecast)

#Renamos columns for BSTS
colnames(DF) <- c("Day", "reach", "frequency" , "Spend" , "CPA" , "Buyers", "clicks", "Impressions" ,"LTV")

#Create a new variable for BSTS Model
bsts_response <- DF$Buyers
(model_components <- list())
AddLocalLinearTrend #prefered trend selector assuming there is a linear regressions between time series
plot(Buyers, ylab = "")

#Trend component
summary(model_components <- AddLocalLinearTrend(model_components, 
                                                y = Buyers))
#seasonal component
summary(model_components <- AddSeasonal(model_components, y = Buyers, 
                                        nseasons  = 52))
#fit the model using iterations to move parameters
st_bsts_fit <- bsts(Buyers, model_components, niter = 2000)


#view the contribution of each elements
burnin <- 500 # Throw away first 500 
tibble(
  date = as.Date(time(Buyers)),
  trend = colMeans(st_bsts_fit$state.contributions[-(1:burnin),"trend",]),
  seasonality = colMeans(st_bsts_fit$state.contributions[-(1:burnin),"seasonal.52.1",])) %>%
  gather("component", "value", trend, seasonality) %>%
  ggplot(aes(x = date, y= value)) + 
  geom_line() + theme_bw() + 
  theme(legend.title = element_blank()) + ylab("") + xlab("") +
  facet_grid(component ~ ., scales="free") + guides(colour=FALSE) +
  theme(axis.text.x=element_text(angle = -90, hjust = 0))

#predict with 90% interval of confidence
pred <- predict(st_bsts_fit, horizon = 10, burn = burnin, quantiles = c(.05, .95))
plot(pred)


#Add predictors that are strongely correlate to the time series. 
bsts_fit <- bsts(Buyers ~ ., state.specification = model_components, 
                 data = DF, niter = 1000)

#predict based on times series seasonality, trends and cycles and predictors
pred_bsts <- predict(bsts_fit, newdata = DF , horizon = 10, burn = burnin, quantiles = c(.05, .95))
plot(pred_bsts)

#Predict fitted values into dataframe
burn <- SuggestBurn(0.1, bsts_fit)
Bsts_fitted_value <- predict(bsts_fit, DF, burn = burn)

#Extract mean fitted values of Bsts models into DF.
y_bsts_mu <- Bsts_fitted_value$mean
Y_bsts_med <- as.data.frame(y_bsts_mu)
write.csv(Y_bsts_med, file = "y_bsts.csv")

#Plot Real vs Baseline Of Bsts model
Date <- DF$Day
Bsts_Buyers_Real <- DF$Buyers
Bsts_Buyers_forecast <- y_bsts_mu

data <- data.frame(Date,  Bsts_Buyers_Real, Bsts_Buyers_forecast)
data$Date <- factor(data$Date, levels = data[["Date"]])

p <- plot_ly(data, x = ~Date, y = ~Bsts_Buyers_Real, name = 'Real', type = 'scatter', mode = 'lines',
             line = list(color = 'rgb(207,181,59)', width = 3)) %>%
  add_trace(y = ~Bsts_Buyers_forecast, name = 'Forecast', line = list(color = 'rgb(22, 96, 167)', width = 3)) %>%
  layout(title = "Bsts Model Real Buyers vs Predicted Buyers",
         xaxis = list(title = "Date"),
         yaxis = list (title = "Buyers Lm model"))

print(p)
